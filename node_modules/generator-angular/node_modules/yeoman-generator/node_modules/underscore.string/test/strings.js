$(document).ready(function() {

  // Include Underscore.string methods to Underscore namespace
  _.mixin(_.str.exports());

  module('String extensions');

  test('Strings: naturalSort', function() {
    var arr =  ['foo2', 'foo1', 'foo10', 'foo30', 'foo100', 'foo10bar'],
      sorted = ['foo1', 'foo2', 'foo10', 'foo10bar', 'foo30', 'foo100'];
    deepEqual(arr.sort(_.naturalCmp), sorted);
  });

  test('Strings: trim', function() {
    equal(_.trim(123), '123', 'Non string');
    equal(_(' foo').trim(), 'foo');
    equal(_('foo ').trim(), 'foo');
    equal(_(' foo ').trim(), 'foo');
    equal(_('    foo     ').trim(), 'foo');
    equal(_('    foo     ').trim(' '), 'foo', 'Manually set whitespace');
    equal(_('\t    foo \t  ').trim(/\s/), 'foo', 'Manually set RegExp /\\s+/');

    equal(_('ffoo').trim('f'), 'oo');
    equal(_('ooff').trim('f'), 'oo');
    equal(_('ffooff').trim('f'), 'oo');


    equal(_('_-foobar-_').trim('_-'), 'foobar');

    equal(_('http://foo/').trim('/'), 'http://foo');
    equal(_('c:\\').trim('\\'), 'c:');

    equal(_(123).trim(), '123');
    equal(_(123).trim(3), '12');
    equal(_('').trim(), '', 'Trim empty string should return empty string');
    equal(_(null).trim(), '', 'Trim null should return empty string');
    equal(_(undefined).trim(), '', 'Trim undefined should return empty string');
  });

  test('String: levenshtein', function() {
    equal(_.levenshtein('Godfather', 'Godfather'), 0);
    equal(_.levenshtein('Godfather', 'Godfathe'), 1);
    equal(_.levenshtein('Godfather', 'odfather'), 1);
    equal(_.levenshtein('Godfather', 'Gdfthr'), 3);
    equal(_.levenshtein('seven', 'eight'), 5);
    equal(_.levenshtein('123', 123), 0);
    equal(_.levenshtein(321, '321'), 0);
    equal(_.levenshtein('lol', null), 3);
    equal(_.levenshtein('lol'), 3);
    equal(_.levenshtein(null, 'lol'), 3);
    equal(_.levenshtein(undefined, 'lol'), 3);
    equal(_.levenshtein(), 0);
  });

  test('Strings: ltrim', function() {
    equal(_(' foo').ltrim(), 'foo');
    equal(_('    foo').ltrim(), 'foo');
    equal(_('foo ').ltrim(), 'foo ');
    equal(_(' foo ').ltrim(), 'foo ');
    equal(_('').ltrim(), '', 'ltrim empty string should return empty string');
    equal(_(null).ltrim(), '', 'ltrim null should return empty string');
    equal(_(undefined).ltrim(), '', 'ltrim undefined should return empty string');

    equal(_('ffoo').ltrim('f'), 'oo');
    equal(_('ooff').ltrim('f'), 'ooff');
    equal(_('ffooff').ltrim('f'), 'ooff');

    equal(_('_-foobar-_').ltrim('_-'), 'foobar-_');

    equal(_(123).ltrim(1), '23');
  });

  test('Strings: rtrim', function() {
    equal(_('http://foo/').rtrim('/'), 'http://foo', 'clean trailing slash');
    equal(_(' foo').rtrim(), ' foo');
    equal(_('foo ').rtrim(), 'foo');
    equal(_('foo     ').rtrim(), 'foo');
    equal(_('foo  bar     ').rtrim(), 'foo  bar');
    equal(_(' foo ').rtrim(), ' foo');

    equal(_('ffoo').rtrim('f'), 'ffoo');
    equal(_('ooff').rtrim('f'), 'oo');
    equal(_('ffooff').rtrim('f'), 'ffoo');

    equal(_('_-foobar-_').rtrim('_-'), '_-foobar');

    equal(_(123).rtrim(3), '12');
    equal(_('').rtrim(), '', 'rtrim empty string should return empty string');
    equal(_(null).rtrim(), '', 'rtrim null should return empty string');
  });

  test('Strings: capitalize', function() {
    equal(_('fabio').capitalize(), 'Fabio', 'First letter is upper case');
    equal(_.capitalize('fabio'), 'Fabio', 'First letter is upper case');
    equal(_.capitalize('FOO'), 'FOO', 'Other letters unchanged');
    equal(_(123).capitalize(), '123', 'Non string');
    equal(_.capitalize(''), '', 'Capitalizing empty string returns empty string');
    equal(_.capitalize(null), '', 'Capitalizing null returns empty string');
    equal(_.capitalize(undefined), '', 'Capitalizing undefined returns empty string');
  });

  test('Strings: join', function() {
    equal(_.join('', 'foo', 'bar'), 'foobar', 'basic join');
    equal(_.join('', 1, 'foo', 2), '1foo2', 'join numbers and strings');
    equal(_.join(' ','foo', 'bar'), 'foo bar', 'join with spaces');
    equal(_.join('1', '2', '2'), '212', 'join number strings');
    equal(_.join(1, 2, 2), '212', 'join numbers');
    equal(_.join('','foo', null), 'foo', 'join null with string returns string');
    equal(_.join(null,'foo', 'bar'), 'foobar', 'join strings with null returns string');
    equal(_(' ').join('foo', 'bar'), 'foo bar', 'join object oriented');
  });

  test('Strings: reverse', function() {
    equal(_.str.reverse('foo'), 'oof' );
    equal(_.str.reverse('foobar'), 'raboof' );
    equal(_.str.reverse('fo